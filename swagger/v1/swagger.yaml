openapi: 3.0.1
info:
  title: Goodnight App API v1 - Your Friendly Sleep Tracker
  description: |
    API documentation for Rails 7.2 Goodnight application.

    ## Authentication
    To use protected endpoints, you need to:
    1. Use the `/auth/login` endpoint to get a token
    2. Click the "Authorize" button at the top right
    3. Enter your token in the format: `Bearer your_token_here`
    4. Click "Authorize" to apply the token to all secured endpoints

    ## About Goodnight App
    This application allows users to track their sleep patterns, follow other users,
    and view sleep records of users they follow.
  version: '1.0'
  # contact:
  #   name: API Support
  #   email: support@example.com

servers:
  - url: '{protocol}://{defaultHost}/api/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      defaultHost:
        default: localhost:3000

tags:
  - name: Health
    description: API health status endpoints
  - name: Authentication
    description: User authentication
  - name: Users
    description: User management operations
  - name: Sleep Records
    description: Operations for tracking sleep patterns
  - name: Socials
    description: Operations for following/unfollowing users

paths:
  # Health Endpoint
  /health:
    get:
      tags:
        - Health
      summary: Check API health status
      description: Used for service health check
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                required:
                  - status

  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: |
        Authenticates a user and returns a JWT token.
        Use the token with the Authorize button to access secured endpoints.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: windu_risky
                password:
                  type: string
                  format: password
                  example: password
              required:
                - username
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2MzQ1NjM5MzB9.AbC123XyZ
                  message:
                    type: string
                    example: Login successful
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: unauthorized
                      message:
                        type: string
                        example: Invalid username or password

  # User Endpoints
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user
      description: |
        Returns the currently authenticated user.
        **Requires authentication** - Use the Authorize button with your JWT token.
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Sleep Record Endpoints
  /sleep_records:
    post:
      tags:
        - Sleep Records
      summary: Clock in (start sleep tracking)
      description: |
        Records when the user goes to bed. This operation creates a new sleep record with a clock_in time.
        **Requires authentication**
      operationId: clockIn
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Successfully clocked in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Clock in successful
                  sleep_record_id:
                    type: string
                    format: uuid
                    example: "01890a5c-5a89-710d-b40a-e482c48efd20"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: parameter_missing
                      message:
                        type: string
                        example: Already clocked in, must clock out first
        '401':
          $ref: '#/components/responses/Unauthorized'

  /sleep_records/{id}/clock_out:
    put:
      tags:
        - Sleep Records
      summary: Clock out (end sleep tracking)
      description: |
        Records when the user wakes up. This operation updates an existing sleep record with a clock_out time.
        **Requires authentication**
      operationId: clockOut
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Sleep record ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully clocked out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Clock out successful
                  duration:
                    type: integer
                    example: 480
                    description: Sleep duration in seconds
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: unprocessable_entity
                      message:
                        type: string
                        example: Already clocked out or not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /friends/sleep_records:
    get:
      tags:
        - Sleep Records
      summary: Get sleep records of following users
      description: |
        Returns sleep records of all users the authenticated user follows, from the previous week,
        sorted by sleep duration.
        **Requires authentication**
      operationId: getFollowingsSleepRecords
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sleep records from followed users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SleepRecord'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Social Endpoints
  /socials/follow/{user_id}:
    post:
      tags:
        - Socials
      summary: Follow a user
      description: |
        Start following another user.
        **Requires authentication**
      operationId: followUser
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: ID of the user to follow
          required: true
          schema:
            type: string
            format: uuid
            example: "01957d76-6a68-7758-92f3-32471ab29999"
      responses:
        '201':
          description: Successfully followed user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully followed user"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: bad_request
                      message:
                        type: string
                        example: You cannot follow yourself
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: unprocessable_entity
                      message:
                        type: string
                        example: You have already followed the user

  /socials/unfollow/{user_id}:
    post:
      tags:
        - Socials
      summary: Unfollow a user
      description: |
        Stop following a user.
        **Requires authentication**
      operationId: unfollowUser
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: ID of the user to unfollow
          required: true
          schema:
            type: string
            format: uuid
            example: "01957d76-6a68-7758-92f3-32471ab29999"
      responses:
        '200':
          description: Successfully unfollowed user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully unfollowed user"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: unprocessable_entity
                      message:
                        type: string
                        example: You have already unfollowed the user

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "01890a5c-10ae-7269-83f5-5df0d634f7c1"
        username:
          type: string
          example: windu_risky
        created_at:
          type: string
          format: date-time
          example: '2024-03-09T12:34:56Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-03-09T12:34:56Z'

    SleepRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          format: uuid
          example: "01957d76-6a68-7758-92f3-32471ab29999"
        clock_in_at:
          type: string
          format: date-time
          example: '2024-03-09T22:30:00Z'
        clock_out_at:
          type: string
          format: date-time
          nullable: true
          example: '2024-03-10T07:15:00Z'
        duration:
          type: integer
          example: 525
          description: Sleep duration in seconds (calculated when clocked out)
        created_at:
          type: string
          format: date-time
          example: '2024-03-09T22:30:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-03-10T07:15:00Z'
        user:
          $ref: '#/components/schemas/User'

  responses:
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: unauthorized
                  message:
                    type: string
                    example: Invalid or missing authentication token

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: not_found
                  message:
                    type: string
                    example: The requested resource could not be found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token authentication.
        Click this "Authorize" button,
        and enter your token in the format:
        Bearer your_token_here
